apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'android-junk-code'
apply plugin: 'xml-class-guard'

android {
  compileSdk 34
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java', 'src/main/kotlin']
      aidl.srcDirs = ['src/main/java', 'src/main/kotlin']
      renderscript.srcDirs = ['src/main/java', 'src/main/kotlin']
      res.srcDirs = ['res']
      assets.srcDirs = ['../core/assets']
      jniLibs.srcDirs = ['libs']
    }
  }
  packagingOptions {
    // Preventing from license violations (more or less):
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/license.txt'
    pickFirst 'META-INF/LGPL2.1'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/notice.txt'
    // Excluding unnecessary meta-data:
    exclude 'META-INF/robovm/ios/robovm.xml'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies.txt'
    // These are only used by GWT, and not Android.
    exclude '**/*.gwt.xml'
  }
  defaultConfig {
    applicationId 'com.v23y84WuI7d29.xswid23'
    minSdkVersion 21
    targetSdkVersion 34
    versionCode 1
    versionName "1.0"
    multiDexEnabled true
  }
  namespace "com.libgdx.game"
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
    coreLibraryDesugaringEnabled true
  }
  kotlinOptions.jvmTarget = "17"

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  androidJunkCode {
    variantConfig {
      release {
//注意：这里的release是变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
        packageBase = 'com.audit.pass.app' //生成java类根包名
        packageCount = 25 //生成包数量
        activityCountPerPackage = 4 //每个包下生成Activity类数量
        excludeActivityJavaFile = false
        //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
        otherCountPerPackage = 25  //每个包下生成其它类的数量
        methodCountPerClass = 15  //每个类下生成方法数量
        resPrefix = "zeiwe_"  //生成的layout、drawable、string等资源名前缀
        drawableCount = 150  //生成drawable资源数量
        stringCount = 150  //生成string数量
      }
    }
  }


  //以下均为非必须
  xmlClassGuard {
    /*
    * 是否查找约束布局的constraint_referenced_ids属性的值，并添加到AabResGuard的白名单中，
    * 是的话，要求你在XmlClassGuard前依赖AabResGuard插件，默认false
    */
    findAabConstraintReferencedIds = false

    /*
    * 是否查找约束布局的constraint_referenced_ids属性的值，并添加到AndResGuard的白名单中，
    * 是的话，要求你在XmlClassGuard前依赖AndResGuard插件，默认false
    */
    findAndConstraintReferencedIds = false
    //用于增量混淆的 mapping 文件
    mappingFile = file("xml-class-mapping.txt")
    //更改manifest文件的package属性，即包名
    packageChange = ["com.ljx.example": "ab.cd"]
    //移动目录
    moveDir = ["com.vest.bag": "sw.ef.gh"]
  }
}

repositories {
  // needed for AAPT2, may be needed for other tools
  google()
}

configurations { natives }

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
  implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  implementation project(':core')

  implementation 'androidx.core:core-ktx:1.10.1'
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'com.google.android.material:material:1.9.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'

  //*****************************归因******************************
  implementation 'com.appsflyer:af-android-sdk:6.9.0'
  implementation 'com.adjust.sdk:adjust-android:4.33.3'
  implementation 'com.adjust.sdk:adjust-android-webbridge:4.33.3'
  implementation "com.android.installreferrer:installreferrer:2.2"
  implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'


  //*****************************登录*******************************
  implementation 'com.google.android.gms:play-services-auth:20.6.0'

  //Google Firebase Login SDK
  implementation platform('com.google.firebase:firebase-bom:31.5.0')
  implementation 'com.google.firebase:firebase-analytics-ktx'
  implementation 'com.google.firebase:firebase-auth-ktx'

  //Facebook Login SDK
  implementation 'com.facebook.android:facebook-android-sdk:[8,9)'

  //Twitter 第三方 API 封装
  implementation 'org.twitter4j:twitter4j-core:4.0.7'

  //libgdx
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.getByName("natives").copy().files.each { jar ->
      def outputDir = null
      if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if (outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}
tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
  packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_SDK_ROOT"
    }
  } else {
    path = "$System.env.ANDROID_SDK_ROOT"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.libgdx.game/com.libgdx.game.android.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
